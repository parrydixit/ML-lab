B2
import pandas as pd
df=pd.read_csv('advertising.csv')
print(df.head())
print("Dataframe shape is = ",df.shape)
**
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(df.drop(['Sales'],axis=1),df['Sales'],test_size=0.25)
lr = LinearRegression()
lr.fit(x_train,y_train)
**
print("Coeffs of the equation = {} \nIntercept = {} ".format(lr.coef_,lr.intercept_))
print("The linear model is: Y = {:.5} + {:.5}*TV + {:.5}*Radio + {:.5}*Newspaper".format(lr.intercept_, lr.coef_[0], lr.coef_[1], lr.coef_[2]))
y_pred = lr.predict(x_test)
**
import numpy as np
from sklearn.metrics import mean_squared_error,mean_absolute_error
pred = lr.predict(x_test)
rmse=np.sqrt(mean_squared_error(y_test,pred))
mae = mean_absolute_error(y_test,pred)
mse = mean_squared_error(y_test,pred)
print("Root Mean Square Srror= {}\nMean Absolute Error = {}\nMean Squared Error = {}".format(rmse,mae,mse))
print("Score",lr.score(df.drop(['Sales'],axis=1),df['Sales']))
**
def trainOnly2Features(f1,f2):
    print(("Only taking features "+f1+" & "+f2).center(50,'='))   x_train,x_test,y_train,y_test=train_test_split(df[[f1,f2]],df['Sales'],test_size=0.25)
    lr = LinearRegression()
    lr.fit(x_train,y_train)
    print("Coeffs of the equation = {} \nIntercept = {} ".format(lr.coef_,lr.intercept_))
    print("The linear model is: Y = {:.5} + {:.5}*{} + {:.5}*{} ".format(lr.intercept_, lr.coef_[0],f1, lr.coef_[1],f2))
    pred = lr.predict(x_test)
rmse=np.sqrt(mean_squared_error(y_test,pred))
    mae = mean_absolute_error(y_test,pred)
    mse = mean_squared_error(y_test,pred)
    print("Root Mean Square Srror= {}\nMean Absolute Error = {}\nMean Squared Error = {}".format(rmse,mae,mse))
**
trainOnly2Features('TV','Radio')
trainOnly2Features('Radio','Newspaper')
trainOnly2Features('TV','Newspaper')
**
import seaborn as sns
sns.pairplot(df,x_vars=['TV','Radio','Newspaper'],y_vars='Sales',kind='reg',height=7,aspect=1)
**
sns.pairplot(df,x_vars=['TV','Radio'],y_vars='Sales',kind='reg',height=7,aspect=1)
**